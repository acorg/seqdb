#! /usr/bin/env python3
# -*- Python -*-

"""
Creates (non-whocc) seqdb from fasta files.
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

from acmacs_base import timeit
import seqdb

# ----------------------------------------------------------------------

def main(args):
    if len(args.input) == 1 and "*" in args.input[0]:
        import glob
        fasta_files = glob.glob(args.input[0]) # for debugging using xcode
    else:
        fasta_files = args.input
    seqdb.create(
        seqdb_filename=args.path_to_db,
        fasta_files=fasta_files,
        match_hidb=args.match_hidb,
        add_clades=args.add_clades,
        save=args.save,
        report_all_passages=args.report_all_passages,
        report_identical=args.report_identical,
        report_not_aligned_prefixes=args.report_not_aligned_prefixes,
        save_not_found_locations_to=args.save_not_found_locations_to,
        verbose=args.verbose
        )

# ----------------------------------------------------------------------

with timeit(sys.argv[0]):
    try:
        import argparse
        # print(sys.argv)
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('input', nargs="+", help='Fasta files to process.')
        parser.add_argument('--db', action='store', dest='path_to_db', required=True, help='Path to sequence database.')
        parser.add_argument('-n', '--no-save', action='store_false', dest='save', default=True, help='Do not save resulting database.')
        # parser.add_argument('--gene', action='store', dest='default_gene', default="HA", help='default gene.')
        # parser.add_argument('--acmacs', action='store', dest='acmacs_url', default='https://localhost:1168', help='AcmacsWeb server host and port, e.g. https://localhost:1168.')
        parser.add_argument('--hidb-dir', action='store', dest='hidb_dir', default="~/AD/data", help='Path to the directory with hidb4.*.json.xz files.')
        parser.add_argument('--match-hidb', action='store_true', dest='match_hidb', default=False, help='Match names against HiDb.')
        parser.add_argument('--clades', action='store_true', dest='add_clades', default=False, help='Add clade information to seqdb.')
        parser.add_argument('--report-identical', action='store_true', dest='report_identical', default=False, help='Report identical sequences.')
        parser.add_argument('--report-not-aligned-prefixes', type=int, action='store', dest='report_not_aligned_prefixes', default=None, help='Report prefixes of not aligned aa sequences up to the specified length (signal peptide is often 16).')
        parser.add_argument('--report-all-passages', action='store_true', dest='report_all_passages', default=False, help='Report all passages in seqdb.')
        parser.add_argument('--save-not-found-locations', action='store', dest='save_not_found_locations_to', default=None, help='Filename to save (append) not found locations to.')
        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
        parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)
        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
