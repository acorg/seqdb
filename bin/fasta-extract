#! /usr/bin/env python3
# -*- Python -*-

"""
Extracts sequences from the fasta file
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

from seqdb import fasta as fasta_m

# ----------------------------------------------------------------------

def main(args):
    exporter = fasta_m.exporter(Path(args.output[0]), "fasta", encode_name=False, wrap=False)
    for entry in fasta_m.read_from_file(args.input[0]):
        if any(name in entry[0] for name in args.name):
            exporter.write(*entry)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('input', nargs=1, help='Fasta file to process.')
    parser.add_argument('output', nargs=1, help='Output fasta file.')
    parser.add_argument('name', nargs="*", help='names to extract (substring match).')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
