#! /usr/bin/env python3
# -*- Python -*-

"""
reports B lineage for seqdb entries
"""

import sys, os, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
acmacsd_root = Path(os.environ["ACMACSD_ROOT"]).resolve()
sys.path[:0] = [str(acmacsd_root.joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import seqdb as seqdb_m
from acmacs_base import timeit

# ----------------------------------------------------------------------

def main(args):
    if args.path_to_seqdb:
        seqdb_m.seqdb_setup(filename=args.path_to_seqdb)
    seqdb = seqdb_m.get_seqdb(True)
    for e in seqdb.iter_entry():
        if e.virus_type == "B":
            print(e.name, e.lineage or "?")

# ----------------------------------------------------------------------

with timeit(sys.argv[0]):
    try:
        import argparse
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

        parser.add_argument('--db', action='store', dest='path_to_seqdb', default=None, help='Path to sequence database.')

        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
