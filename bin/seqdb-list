#! /usr/bin/env python3
# -*- Python -*-

"""
Query seqdb
"""

import sys, os, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
acmacsd_root = Path(os.environ["ACMACSD_ROOT"]).resolve()
sys.path[:0] = [str(acmacsd_root.joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import seqdb as seqdb_m
from acmacs_base import timeit

# ----------------------------------------------------------------------

def main(args):
    if args.path_to_seqdb:
        seqdb_m.seqdb_setup(args.path_to_seqdb)
    seqdb = seqdb_m.get_seqdb(timer=True)
    if args.list_all:
        print("Entries:", seqdb.number_of_entries(), " Seqs:", seqdb.number_of_seqs())
        for e in seqdb.iter_seq():
            print(e.seq_id(encoded=False))
    elif args.filter_re:
        for e in seqdb.iter_seq().filter_name_regex(args.filter_re):
            print(e.make_name())
            print("  Seq_id:", e.seq_id(encoded=False))
            print("  HI names:\n    ", "\n    ".join(e.seq.hi_names), sep="")
    elif args.name:
        r = seqdb.find_by_name(args.name)
        if r:
            print(r.name)
            for e in r:
                print(" ", e.passage())
        else:
            print("NOT FOUND:", args.name)
    elif args.seq_id:
        r = seqdb.find_by_seq_id(args.seq_id)
        print(r.seq_id(encoded=False))
    elif args.lab or args.subtype or args.lineage:
        result = seqdb.iter_seq()
        if args.lab:
            result = result.filter_lab(args.lab)
        if args.subtype:
            result = result.filter_subtype(args.subtype)
        if args.lineage:
            result = result.filter_lineage(args.lineage)
        if args.start or args.end:
            result = result.filter_date_range(args.start or "", args.end or "")
        entries = 0
        for e in result: # seqdb.iter_seq().filter_lab(args.lab).filter_subtype(args.subtype or "").filter_lineage(args.lineage or ""):
            print("{} [{}] {} {} {}".format(e.make_name(), e.entry.date(), e.entry.lineage, e.seq.lab(), e.seq.clades()))
            print("  Seq_id:", e.seq_id(encoded=False))
            print("  HI names:\n    ", "\n    ".join(e.seq.hi_names), sep="")
            entries += 1
        print(entries, " sequences listed")
    elif args.report:
        print(seqdb.report())

# ----------------------------------------------------------------------

with timeit(sys.argv[0]):
    try:
        import argparse
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

        parser.add_argument('--db', action='store', dest='path_to_seqdb', default=None, help='Path to sequence database.')
        parser.add_argument('--re', action="store", dest="filter_re", default=None, help='List filtered by regex (like finding base-seq for exporting).')
        parser.add_argument('--id', action="store", dest="seq_id", default=None, help='Seq_id to look for.')
        parser.add_argument('--name', action="store", dest="name", default=None, help='Name to look for.')
        parser.add_argument('--lab', action="store", dest="lab", default=None, help='List filtered by lab.')
        parser.add_argument('--flu', action="store", dest="subtype", default=None, help='List filtered by subtype: A(H1N1), A(H3N2), B.')
        parser.add_argument('--lineage', action="store", dest="lineage", default=None, help='List filtered by lineage: VICTORIA, YAMAGATA.')
        parser.add_argument('--start', action="store", dest="start", default=None, help='List isolated after date.')
        parser.add_argument('--end', action="store", dest="end", default=None, help='List isolated before date.')
        parser.add_argument('--all', action="store_true", dest="list_all", default=False, help='List all seq ids.')
        parser.add_argument('--report', action="store_true", dest="report", default=False, help='report.')

        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
